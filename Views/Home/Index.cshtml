@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Liste</h1>
</div>
<h2>William Fernandes</h2>
<ul class="list-group">
  <li class="list-group-item disabled" aria-disabled="true">1. Avoir une application ASP.Net Core de base nommée "BikeWatcher" qui tourne sur sa machine</li>
  <li class="list-group-item disabled" aria-disabled="true">1. Démarrer un site avec asp dotnet core :  https://docs.microsoft.com/fr-fr/aspnet/core/tutorials/first-mvc-app/start-mvc?view=aspnetcore-3.1&tabs=visual-studio</li>
  <li class="list-group-item disabled" aria-disabled="true">2. Créer un repository public sur github, bitbucket ou gitlab pour héberger votre code.</li>
  <li class="list-group-item disabled" aria-disabled="true">1. gitignore de base pour .NET Core :  https://gist.github.com/vmandic/ac2ecc9c24f6899ee0ec46e4ce444a0e</li>
  <li class="list-group-item">3. Publier votre code sur le repository à chaque avancée</li>
  <li class="list-group-item disabled" aria-disabled="true">4. Supprimer du menu les pages de bases pour 2 liens de menu fonctionnels vers les pages vides suivantes : "Accueil", "Liste des stations", "Carte", "Mes favoris"</li>
  <li class="list-group-item disabled" aria-disabled="true">5. Compléter la pages "Accueil" pour présenter votre travail, votre nom/prenom, cette liste d'objectifs (que vous rayerez au fur et à mesure) et l'URL où votre code source est visible</li>
  <li class="list-group-item">6. Se brancher sur l'API VeloV du grand Lyon pour récupérer les données en temps réel</li>
  <li class="list-group-item">1. API OpenData du Grand Lyon : https://public.opendatasoft.com/explore/dataset/station-velov-grand-lyon/api/?flg=fr</li>
  <li class="list-group-item">2. Lire des données issues d'un flux JSON :  https://docs.microsoft.com/fr-fr/dotnet/csharp/tutorials/console-webapiclient</li>
  <li class="list-group-item">7. Afficher les données de l'API sous forme de tableau sur la page "Liste des stations" (les stations sont triées par ordre alphabétique)</li>
  <li class="list-group-item">1. Razor Cheat sheet : https://gist.github.com/jonlabelle/8738373</li>
  <li class="list-group-item">8. Afficher les données de l'API sous forme de carte sur la page "Carte" (chaque station sera représentée par une épingle à son emplacement)s</li>
  <li class="list-group-item">1. Intégrer une carte openstreet map sur un site : https://nouvelle-techno.fr/actualites/2018/05/11/pas-a-pas-inserer-une-carte-openstreetmap-sur-votre-site</li>
  <li class="list-group-item">9. Ajouter sur caque épingle de la carte la possibilité de cliquer pour afficher une infobulle qui indiquera le nombre de vélos et de places à la station en question</li>
  <li class="list-group-item">10. Ajouter la possibilité de créer un compte utilisateur sur votre application</li>
  <li class="list-group-item">1. https://docs.microsoft.com/en-us/aspnet/core/security/authentication/scaffold-identity?view=aspnetcore-3.1&tabs=visual-studio</li>
  <li class="list-group-item">11. Ajouter sur la page "Liste des stations" et/ou "Carte" la possibilité de rajouter des stations en favoris</li>
  <li class="list-group-item">12. Compléter la page "Mes favoris" pour n'afficher sous forme de tableau que les stations marquées en favoris</li>
  <li class="list-group-item">13. Stocker les stations favorites dans une base SQL</li>
  <li class="list-group-item">1. Prise en main d'EF Core dans une application web MVC ASP.Net https://docs.microsoft.com/fr-fr/aspnet/core/data/ef-mvc/intro?view=aspnetcore-3.1</li>
  <li class="list-group-item">14. Centrer automatiquement la carte par rapport à la position de l'utilisateur</li>
  <li class="list-group-item">1. Récupérer la position de l'utilisateur : https://developer.mozilla.org/fr/docs/Web/API/Geolocation_API</li>
  <li class="list-group-item">15. Trier automatiquement la liste des stations par rapport à la position de l'utilisateur</li>
  <li class="list-group-item">16. Rendre votre application bilingue Français / Anglais</li>
  <li class="list-group-item">1. https://docs.microsoft.com/fr-fr/aspnet/core/fundamentals/localization?view=aspnetcore-3.1</li>
  <li class="list-group-item">17. Rendre votre application utilisable à la fois pour la ville de Lyon et la ville de Bordeaux (par exemple un bouton permettra de passer de l'un à l'autre dans le menu)</li>
  <li class="list-group-item">1. Une API affichant les données pour la ville de Bordeaux : https://api.alexandredubois.com/vcub-backend/vcub.php</li>
  <li class="list-group-item">18. Déployer votre code sur un serveur accessible publiquement en consultation</li>
  <li class="list-group-item">1. Déployer une application ASP.Net Core sur un serveur Debian : https://medium.com/setu677/how-to-host-asp-net-core-on-linux-using-nginx-85339560e929</li>
  <li class="list-group-item">2. Déployer une application ASP.Net Core sur Azure : https://docs.microsoft.com/fr-fr/aspnet/core/tutorials/publish-to-azure-webapp-using-vs?view=aspnetcore-3.1</li>
  <li class="list-group-item">19. Permettre aux utilisateurs de signaler un vélo en panne</li>
  <li class="list-group-item">20. Faire en sorte que votre site soit agréable à utiliser sur mobile (il ne doit pas comporter ascenseur horizontal)</li>
  <li class="list-group-item">21. BONUS : toute fonctionnalité supplémentaire sera valorisée, pensez-juste à l'indiquer sur votre page d'accueil que je puisse la comptabiliser</li>
</ul>
